// Generated by Dagger (https://dagger.dev).
package com.example.demo.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.demo.database.AlertViewModel;
import com.example.demo.database.AlertViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.demo.database.ParaDao;
import com.example.demo.database.ParaRepository;
import com.example.demo.database.QuranDatabase;
import com.example.demo.database.SurahDao;
import com.example.demo.database.SurahRepository;
import com.example.demo.network.ApiService;
import com.example.demo.network.ApiService2;
import com.example.demo.network.ApiServiceImpl;
import com.example.demo.repository.MainRepository;
import com.example.demo.ui.ParaActivity;
import com.example.demo.ui.QuranActivity;
import com.example.demo.ui.SelectRecitorActivity;
import com.example.demo.ui.SurahActivity;
import com.example.demo.ui.SurahListActivity;
import com.example.demo.ui.fragment.ParaListFragment;
import com.example.demo.ui.fragment.SurahListFragment;
import com.example.demo.viewmodel.ParaListViewModel;
import com.example.demo.viewmodel.ParaListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.demo.viewmodel.RecitorListViewModel;
import com.example.demo.viewmodel.RecitorListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.demo.viewmodel.SurahListViewModel;
import com.example.demo.viewmodel.SurahListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.demo.viewmodel.VerseListViewModel;
import com.example.demo.viewmodel.VerseListViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBaseApp_HiltComponents_SingletonC extends BaseApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerBaseApp_HiltComponents_SingletonC singletonC = this;

  private Provider<QuranDatabase> providesSurahDatabaseProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<ApiService> providesApiServiceProvider;

  private Provider<ApiService2> providesApiService2Provider;

  private DaggerBaseApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private QuranDatabase quranDatabase() {
    return AppModule_ProvidesSurahDatabaseFactory.providesSurahDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SurahDao surahDao() {
    return AppModule_ProvidesSurahDaoFactory.providesSurahDao(providesSurahDatabaseProvider.get());
  }

  private SurahRepository surahRepository() {
    return AppModule_ProvidesSurahRepositoryFactory.providesSurahRepository(surahDao());
  }

  private ParaDao paraDao() {
    return AppModule_ProvidesParaDaoFactory.providesParaDao(providesSurahDatabaseProvider.get());
  }

  private ParaRepository paraRepository() {
    return AppModule_ProvidesParaRepositoryFactory.providesParaRepository(paraDao());
  }

  private ApiService apiService() {
    return AppModule_ProvidesApiServiceFactory.providesApiService(providesOkHttpClientProvider.get(), AppModule_ProvidesUrlTestFactory.providesUrlTest());
  }

  private ApiService2 apiService2() {
    return AppModule_ProvidesApiService2Factory.providesApiService2(providesOkHttpClientProvider.get(), AppModule_ProvidesUrlTestFactory.providesUrlTest());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.providesSurahDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<QuranDatabase>(singletonC, 0));
    this.providesOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 2));
    this.providesApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonC, 1));
    this.providesApiService2Provider = DoubleCheck.provider(new SwitchingProvider<ApiService2>(singletonC, 3));
  }

  @Override
  public void injectBaseApp(BaseApp baseApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public BaseApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerBaseApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements BaseApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public BaseApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements BaseApp_HiltComponents.ActivityC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements BaseApp_HiltComponents.FragmentC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements BaseApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements BaseApp_HiltComponents.ViewC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements BaseApp_HiltComponents.ViewModelC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements BaseApp_HiltComponents.ServiceC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends BaseApp_HiltComponents.ViewWithFragmentC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends BaseApp_HiltComponents.FragmentC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectParaListFragment(ParaListFragment paraListFragment) {
    }

    @Override
    public void injectSurahListFragment(SurahListFragment surahListFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends BaseApp_HiltComponents.ViewC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends BaseApp_HiltComponents.ActivityC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectParaActivity(ParaActivity paraActivity) {
    }

    @Override
    public void injectQuranActivity(QuranActivity quranActivity) {
    }

    @Override
    public void injectSelectRecitorActivity(SelectRecitorActivity selectRecitorActivity) {
    }

    @Override
    public void injectSurahActivity(SurahActivity surahActivity) {
    }

    @Override
    public void injectSurahListActivity(SurahListActivity surahListActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(5).add(AlertViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ParaListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecitorListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SurahListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(VerseListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends BaseApp_HiltComponents.ViewModelC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AlertViewModel> alertViewModelProvider;

    private Provider<ParaListViewModel> paraListViewModelProvider;

    private Provider<RecitorListViewModel> recitorListViewModelProvider;

    private Provider<SurahListViewModel> surahListViewModelProvider;

    private Provider<VerseListViewModel> verseListViewModelProvider;

    private ViewModelCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AlertViewModel alertViewModel() {
      return new AlertViewModel(singletonC.surahRepository(), singletonC.paraRepository());
    }

    private ApiServiceImpl apiServiceImpl() {
      return new ApiServiceImpl(singletonC.providesApiServiceProvider.get(), singletonC.providesApiService2Provider.get());
    }

    private MainRepository mainRepository() {
      return new MainRepository(apiServiceImpl());
    }

    private ParaListViewModel paraListViewModel() {
      return new ParaListViewModel(mainRepository());
    }

    private RecitorListViewModel recitorListViewModel() {
      return new RecitorListViewModel(mainRepository());
    }

    private SurahListViewModel surahListViewModel() {
      return new SurahListViewModel(mainRepository());
    }

    private VerseListViewModel verseListViewModel() {
      return new VerseListViewModel(mainRepository());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.alertViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.paraListViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.recitorListViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.surahListViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.verseListViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.example.demo.database.AlertViewModel", (Provider) alertViewModelProvider).put("com.example.demo.viewmodel.ParaListViewModel", (Provider) paraListViewModelProvider).put("com.example.demo.viewmodel.RecitorListViewModel", (Provider) recitorListViewModelProvider).put("com.example.demo.viewmodel.SurahListViewModel", (Provider) surahListViewModelProvider).put("com.example.demo.viewmodel.VerseListViewModel", (Provider) verseListViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.demo.database.AlertViewModel 
          return (T) viewModelCImpl.alertViewModel();

          case 1: // com.example.demo.viewmodel.ParaListViewModel 
          return (T) viewModelCImpl.paraListViewModel();

          case 2: // com.example.demo.viewmodel.RecitorListViewModel 
          return (T) viewModelCImpl.recitorListViewModel();

          case 3: // com.example.demo.viewmodel.SurahListViewModel 
          return (T) viewModelCImpl.surahListViewModel();

          case 4: // com.example.demo.viewmodel.VerseListViewModel 
          return (T) viewModelCImpl.verseListViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends BaseApp_HiltComponents.ActivityRetainedC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends BaseApp_HiltComponents.ServiceC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.demo.database.QuranDatabase 
        return (T) singletonC.quranDatabase();

        case 1: // com.example.demo.network.ApiService 
        return (T) singletonC.apiService();

        case 2: // okhttp3.OkHttpClient 
        return (T) AppModule_ProvidesOkHttpClientFactory.providesOkHttpClient();

        case 3: // com.example.demo.network.ApiService2 
        return (T) singletonC.apiService2();

        default: throw new AssertionError(id);
      }
    }
  }
}

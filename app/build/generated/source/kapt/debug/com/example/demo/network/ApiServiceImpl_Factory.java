// Generated by Dagger (https://dagger.dev).
package com.example.demo.network;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiServiceImpl_Factory implements Factory<ApiServiceImpl> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<ApiService2> apiService2Provider;

  public ApiServiceImpl_Factory(Provider<ApiService> apiServiceProvider,
      Provider<ApiService2> apiService2Provider) {
    this.apiServiceProvider = apiServiceProvider;
    this.apiService2Provider = apiService2Provider;
  }

  @Override
  public ApiServiceImpl get() {
    return newInstance(apiServiceProvider.get(), apiService2Provider.get());
  }

  public static ApiServiceImpl_Factory create(Provider<ApiService> apiServiceProvider,
      Provider<ApiService2> apiService2Provider) {
    return new ApiServiceImpl_Factory(apiServiceProvider, apiService2Provider);
  }

  public static ApiServiceImpl newInstance(ApiService apiService, ApiService2 apiService2) {
    return new ApiServiceImpl(apiService, apiService2);
  }
}

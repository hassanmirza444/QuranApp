// Generated by Dagger (https://dagger.dev).
package com.example.demo.di;

import com.example.demo.network.ApiService2;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesApiService2Factory implements Factory<ApiService2> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<String> urlProvider;

  public AppModule_ProvidesApiService2Factory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<String> urlProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.urlProvider = urlProvider;
  }

  @Override
  public ApiService2 get() {
    return providesApiService2(okHttpClientProvider.get(), urlProvider.get());
  }

  public static AppModule_ProvidesApiService2Factory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<String> urlProvider) {
    return new AppModule_ProvidesApiService2Factory(okHttpClientProvider, urlProvider);
  }

  public static ApiService2 providesApiService2(OkHttpClient okHttpClient, String url) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.providesApiService2(okHttpClient, url));
  }
}

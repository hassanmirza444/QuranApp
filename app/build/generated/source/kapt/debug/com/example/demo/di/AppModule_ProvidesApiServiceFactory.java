// Generated by Dagger (https://dagger.dev).
package com.example.demo.di;

import com.example.demo.network.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesApiServiceFactory implements Factory<ApiService> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<String> urlProvider;

  public AppModule_ProvidesApiServiceFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<String> urlProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.urlProvider = urlProvider;
  }

  @Override
  public ApiService get() {
    return providesApiService(okHttpClientProvider.get(), urlProvider.get());
  }

  public static AppModule_ProvidesApiServiceFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<String> urlProvider) {
    return new AppModule_ProvidesApiServiceFactory(okHttpClientProvider, urlProvider);
  }

  public static ApiService providesApiService(OkHttpClient okHttpClient, String url) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.providesApiService(okHttpClient, url));
  }
}
